---
title: "Analyses_Manuscript"
author: "Jens H. FÃ¼nderich"
format: html
editor: visual
---

# Set Up

## Install & Load packages

```{r}

## Library Loading
packages <- c("dplyr", 
              "flextable", 
              "ggplot2",
              "metafor",
              "MKpower",
              "readr",
              "tibble", 
              "officer", 
              "osfr")

## check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
  
  pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
  
  if(pkg_avail){
    require(x, character.only = TRUE)             # load the library, if already installed
    
  }else{
    install.packages(x)                           # install the library, if missing
    require(x, character.only = TRUE)             # load after installation
  }
})

## keep the environment tidy 
rm(packages)

```

## 

## Source Custom Functions

```{r}

## source the function for Fig. 1 and 5-7
source("Custom_Functions/umbrella_fun.R")

```

## Download Multi-Lab Data

```{r}

## download data as rds object from DRIPHT Repository (https://osf.io/g2fzq) 
csv_download <- osfr::osf_retrieve_file("6pw3s") %>% 
  osfr::osf_download(., 
                     path = file.path("Input_Data"))

## import the csv file 
DRIPHT_df <- readr::read_csv(file = csv_download$local_path)

## keep the environment tidy 
rm(csv_download)

```

# Fig. 1-4

## Fig. 1

```{r}

## create Fig. 1
Fig_1 <- umbrella_fun(scale_min = 1, scale_max = 7)

## save Fig. 1
ggsave(file = "Output_Graphics/Fig_1.png", 
       Fig_1, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_1
```

## 

## Fig. 2

```{r}

## set parameters for the scale
scale_min <-  1
scale_max <- 7
step_size <- 1

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD <- 0.5

## set control group means of the four MD
CM <- c(
  mean(rep(4, times = 12)), # mean = 4
  mean(rep(c(1,7), times = c(6, 6))), # mean = 4
  mean(rep(c(6,7), times = c(6, 6))), # mean = 6.5
  mean(rep(c(1,7), times = c(1,11)))  # mean = 6.5
)

## calculate treatment group means of the four MD
TM <- c(
  mean(rep(c(4,5), times = c(6, 6))), # mean = 4.5
  mean(rep(c(1,7), times = c(5, 7))), # mean = 4.5
  mean(rep(7, times = 12)), # mean = 7
  mean(rep(7, times = 12)) # mean = 7
)

## set control group standard deviations of the four MD
C_SD <- c(
  sd(rep(4, times = 12)), # mean = 4
  sd(rep(c(1,7), times = c(6, 6))), # mean = 4
  sd(rep(c(4,5), times = c(5, 7))), # mean = 6.5
  sd(rep(c(1,7), times = c(1,11)))  # mean = 6.5
)

## set treatment group standard deviations of the four MD
T_SD <- c(
  sd(rep(c(4,5), times = c(6, 6))), # mean = 4.5
  sd(rep(c(1,7), times = c(5, 7))), # mean = 4.5
  sd(rep(7, times = 12)), # mean = 7
  sd(rep(7, times = 12)) # mean = 7
)

## use the sample SD (n in the denominator), not estimates for the population SD
C_SD <- sqrt(C_SD^2 * (C_N - 1) / C_N )
T_SD <- sqrt(T_SD^2 * (T_N - 1) / T_N )

## store data in df 
Fig_2_data <- data.frame(
    ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
    means = c(CM, TM) - scale_min, 
    SD = c(C_SD, T_SD), 
    group_color = as.factor(rep(c(0.2, 0.8), times = c(length(C_SD), length(T_SD))))
  )

### create the data for the umbrella 

## create means of the scale from 0 to scale_max_0
# rating_scale_means <- seq(from = 0, to = scale_max_0, by = scale_max_0/1000)
rating_scale_means <- seq(from = 0, to = scale_max_0, by = scale_max_0/(200*scale_max_0))

## calculate Bernoulli means for upper limit 
## we assume all values are 
## x = {0;scale_max_0}
p_upper <- rating_scale_means/scale_max_0

## calculate Var according to Bernoulli distribution, rescale and take the sqrt
SD_upper_limit <- sqrt(scale_max_0^2 * p_upper * (1-p_upper))

## calculate Bernoulli means for lower limit 
## we assume all values are 
## x = { ceiling(rating_scale_means); floor(rating_scale_means) } 
p_lower <- rating_scale_means - floor(rating_scale_means)

## calculate Var according to Bernoulli distribution, rescale the variance and take the sqrt
SD_lower_limit <- sqrt((p_lower * (1-p_lower)))

## store umbrella data in df
umbrella_data <- data.frame(
  upper_x = rating_scale_means,
  upper_y = SD_upper_limit,
  lower_x = rating_scale_means,
  lower_y = SD_lower_limit
  )

## plot the umbrella

## create Fig. 2
Fig_2 <- ggplot(data = umbrella_data) +
  ## umbrella
  geom_line(aes(x = upper_x,
                y = upper_y)) +
  geom_line(aes(x = lower_x,
                      y = lower_y)) +
  ## segments
  geom_segment(aes(x = 3, y = 0, yend = 3), linetype = 2, color = "#00BB99") +
  geom_segment(aes(x = 3.5, y = 0.5, yend = Fig_2_data$SD[6]), linetype = 2, color = "#00BB99") +
  geom_segment(aes(x = 5.5, y = 0.5, yend = Fig_2_data$SD[4]), linetype = 2, color = "#00BB99") +
  ## plot data 
  geom_line(data = subset(Fig_2_data, Fig_2_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#0060DD",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_2_data, Fig_2_data$ID == 1), 
             aes(x = means, 
                 y = SD),
             color ="#0060DD",
             size = 2) +
  geom_line(data = subset(Fig_2_data, Fig_2_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#ff8800",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_2_data, Fig_2_data$ID == 2), 
             aes(x = means, 
                 y = SD),
             color =  "#ff8800",
             size = 2) +
  geom_line(data = subset(Fig_2_data, Fig_2_data$ID == 3), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#0060DD", 
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_2_data, Fig_2_data$ID == 3), 
             aes(x = means, 
                 y = SD),
             color = "#0060DD",
             size = 2) +
  geom_line(data = subset(Fig_2_data, Fig_2_data$ID == 4), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#DD0000",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_2_data, Fig_2_data$ID == 4), 
             aes(x = means, 
                 y = SD),
             color = "#DD0000",
             size = 2) +
  ## theme, etc. 
  theme_minimal() +
  scale_x_continuous(name = "mean", 
                     breaks = seq(from = 0, to = scale_max - scale_min, by = step_size), 
                     labels = seq(from = scale_min, to = scale_max, by = step_size)) + 
  ylab("standard deviation") + 
  theme(legend.position = "none")
 

## save Fig. 2
ggsave(file = "Output_Graphics/Fig_2.png", 
       Fig_2, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_2


## keep the environment tidy 
rm(Fig_2_data, umbrella_data,
   C_N, C_SD, CM, MD, 
   p_lower, p_upper, rating_scale_means, SD_lower_limit, SD_upper_limit, 
   scale_max, scale_max_0, scale_min, step_size, 
   T_N, T_SD, TM)

```

## 

## Fig. 3

```{r}

### create data with the following specifications and calculate power
## 7-point rating scale 
## MD: 0.5 
## n (per group): range from 12-360 (total n from 24-760)
## alpha = 0.05
## CM_1 = 4.5, TM_1 = 5, CM_2 = 6.5, TM_2 = 7, CM_3 = 6.5, TM_3 = 7
## SD_1 = maximum, SD_2 = maximum, SD_3 = minimum 
## the fourth line is the minimum at CM_4 = 4.5, TM_4 = 5
## we do not calculate these, because SD_3 = SD_4 

## set a vector with a range of n (per group) 
n_group_vec <- seq(from = 12, to = 360, by = 12)

## calculate power per n
Fig_3_data <- lapply(
  n_group_vec, 
  function(n_group){
    
    ### create the data for the umbrella 
    
    ## calculate scale max if the scale starts at 0
    scale_max_0 <- 7 - 1
    
    ## create means of the scale from 0 to scale_max_0
    rating_scale_means <- c(4.5, 5, 6.5, 7) - 1

    ## calculate Bernoulli means for upper limit 
    ## we assume all values are 
    ## x = {0;scale_max_0}
    p_upper <- rating_scale_means/scale_max_0

    ## calculate Var according to Bernoulli distribution, rescale and take the sqrt
    SD_upper_limit <- sqrt(scale_max_0^2 * p_upper * (1-p_upper))

    ## calculate Bernoulli means for lower limit 
    ## we assume all values are 
    ## x = { ceiling(rating_scale_means); floor(rating_scale_means) } 
    p_lower <- rating_scale_means - floor(rating_scale_means)
    ## calculate Bernoulli Var, rescale it and take the sqrt
    SD_lower_limit <- sqrt((p_lower * (1-p_lower)))
    
    ## select the appropriate SD (MD = 0.5)
    SD_1_control <- SD_upper_limit[1]
    SD_2_control <- SD_upper_limit[3]
    SD_3_control <- SD_lower_limit[1]
    SD_1_treatment <- SD_upper_limit[2]
    SD_2_treatment <- SD_upper_limit[4]
    SD_3_treatment <- SD_lower_limit[2]

    ## calculate power 
    Welch_results_1 <- MKpower::power.welch.t.test(n = n_group*2, 
                                           delta = 0.5, 
                                           sd1 = SD_1_control, 
                                           sd2 = SD_1_treatment, 
                                           sig.level = 0.05,
                                           alternative = "two.sided")
    
    Welch_results_2 <- MKpower::power.welch.t.test(n = n_group*2, 
                                             delta = 0.5, 
                                             sd1 = SD_2_control,
                                             sd2 = SD_2_treatment,
                                             sig.level = 0.05,
                                             alternative = "two.sided")
    
    Welch_results_3 <- MKpower::power.welch.t.test(n = n_group*2, 
                                                   delta = 0.5, 
                                                   sd1 = SD_3_control,
                                                   sd2 = SD_3_treatment,
                                                   sig.level = 0.05,
                                                   alternative = "two.sided")
    
    ## export results as df 
    data.frame(n = n_group*2, 
               power_1_Welch = Welch_results_1$power, 
               power_2_Welch = Welch_results_2$power,
               power_3_Welch = Welch_results_3$power
    )
    
  }
)

## store data in a single df
Fig_3_data <- do.call(rbind, Fig_3_data)

## create Fig. 3
Fig_3 <- ggplot(data = Fig_3_data) + 
  geom_ribbon(aes(x = n, ymin = power_2_Welch, ymax = power_3_Welch), 
              fill="#00BB99", 
              alpha=0.15) +
  geom_ribbon(aes(x = n, ymin = power_1_Welch, ymax = power_3_Welch), 
              fill="#00BB99", 
              alpha=0.1) +
  geom_point(aes(x = n, y = power_3_Welch), 
             color = "#0060DD", 
             alpha = 1) + 
  geom_point(aes(x = n, y = power_2_Welch), 
             color = "#ff8800", 
             alpha = 0.7) +
  geom_point(aes(x = n, y = power_1_Welch), 
             color = "#DD0000", 
             alpha = 0.7) +
  ## theme, etc.
  ylab(label = "Power") + 
  theme_minimal() 

## save Fig. 3
ggsave(file = "Output_Graphics/Fig_3.png", 
       Fig_3, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_3


## keep the environment tidy 
rm(n_group_vec)

```

## 

## Fig. 4

```{r}

### three lines 

## Line A 
## MD = 2, SD = 2, CM = 2, TM = 4


## Line A 
## MD = 2, C_SD = 2, T_SD = 0, CM = 5, TM = 7

## Line C 
## MD = 5, SD = 1, CM = 1.5, TM = 6.5 

## set parameters for the scale
scale_min <-  1
scale_max <- 7
step_size <- 1

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD_1 <- 2
MD_2 <- 2
MD_3 <- 5

## set control group means of the three MD
CM <- c(2, 5, 1.5)

## calculate treatment group means of the three MD
TM <- c(4, 7, 6.5)

## set control group standard deviations of the three MD
C_SD <- c(2, 2, 1)

## set treatment group standard deviations of the three MD
T_SD <- c(2, 0, 1)

## use the sample SD (n in the denominator), not estimates for the population SD
# C_SD <- sqrt(C_SD^2 * (C_N - 1) / C_N )
# T_SD <- sqrt(T_SD^2 * (T_N - 1) / T_N )

## store data in df 
Fig_4_data <- data.frame(
    ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
    means = c(CM, TM) - scale_min, 
    SD = c(C_SD, T_SD) 
  )


### create data for the umbrella 
  
## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min
  
## create means of the scale from 0 to scale_max_0
rating_scale_means <- seq(from = 0, to = scale_max_0, by = scale_max_0/(200*scale_max_0))
  
## calculate Bernoulli means for upper limit 
## we assume all values are 
## x = {0;scale_max_0}
p_upper <- rating_scale_means/scale_max_0
  
## calculate Var according to Bernoulli distribution, rescale and take the sqrt
SD_upper_limit <- sqrt(scale_max_0^2 * p_upper * (1-p_upper))
  
## calculate Bernoulli means for lower limit 
## we assume all values are 
## x = { ceiling(rating_scale_means); floor(rating_scale_means) } 
p_lower <- rating_scale_means - floor(rating_scale_means)
  
## calculate Var according to Bernoulli distribution, rescale the variance and take the sqrt
SD_lower_limit <- sqrt((p_lower * (1-p_lower)))

## create plot data
umbrella_data <- data.frame(
  upper_x = rating_scale_means,
  upper_y = SD_upper_limit,
  lower_x = rating_scale_means,
  lower_y = SD_lower_limit
  )

## create Fig. 4
Fig_4 <- ggplot(data = umbrella_data) +
  ## umbrella 
  geom_line(aes(x = upper_x,
                y = upper_y)) +
  geom_line(aes(x = lower_x,
                y = lower_y)) +
  ## data 
  geom_line(data = subset(Fig_4_data, Fig_4_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#0060DD",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_4_data, Fig_4_data$ID == 1), 
             aes(x = means, 
                 y = SD), 
             color = "#0060DD",
             size = 2) +
  geom_line(data = subset(Fig_4_data, Fig_4_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#990099",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_4_data, Fig_4_data$ID == 2), 
             aes(x = means, 
                 y = SD),
             color = "#990099",
             size = 2) +
  geom_line(data = subset(Fig_4_data, Fig_4_data$ID == 3),
            aes(x = means,
                y = SD,
                group = ID),
             color = "#00BB99",
            size = 1,
            alpha = 1) +
  geom_point(data = subset(Fig_4_data, Fig_4_data$ID == 3),
             aes(x = means,
                 y = SD),
              color = "#00BB99",
             size = 2) +
  ## labels
  annotate(geom = "text", x = 2, y = 2.2, label = "A", color ="black") + 
  annotate(geom = "text", x = 4.75, y = 1.5, label = "B", color = "black") + 
  annotate(geom = "text", x = 3, y = 1.2, label = "C", color = "black") + 
  ## theme, etc. 
  theme_minimal() +
  scale_x_continuous(name = "mean", 
                     breaks = seq(from = 0, to = scale_max - scale_min, by = step_size), 
                     labels = seq(from = scale_min, to = scale_max, by = step_size)) + 
  ylab("standard deviation") + 
  theme(legend.position = "none")


## save Fig. 4
ggsave(file = "Output_Graphics/Fig_4.png",
       Fig_4,
       width = 16,
       height = 9,
       units = "cm",
       bg='#ffffff')

Fig_4

## keep the environment tidy
rm(Fig_4_data, umbrella_data,
   C_N, C_SD, CM, MD_1, MD_2, MD_3,
   p_lower, p_upper, rating_scale_means, SD_lower_limit, SD_upper_limit, 
   scale_max, scale_max_0, scale_min, step_size, 
   T_N, T_SD, TM)

```

## 

# Prepare Multi-Lab Data

## Select Data-Sets

```{r}

## names of the subset for the manuscript
subset_names <- c("Gray", "Knobe", "Oppenheimer_Meyvis")

## create subset 
analysis_subset <- DRIPHT_df %>% dplyr::filter(MASC %in% subset_names)

```

## Apply Meta-Analyses

```{r}

## we run the meta-analyses using metafor 
MA_results <- lapply(
  subset_names, 
  function(name){
    list(
      MD = metafor::rma(yi = MD, 
                        sei = SE_MD, 
                        data = analysis_subset %>% dplyr::filter(MASC == name), 
                        method = "REML"), 
      SMD = metafor::rma(yi = SMD, 
                         sei = SE_SMD, 
                         data = analysis_subset %>% dplyr::filter(MASC == name), 
                        method = "REML")
    )
    
  }
)

names(MA_results) <- subset_names

## export results 
readr::write_rds(MA_results, 
                 file = "Output_Data/MA_results.rds")

```

# Fig. 5-8

## Fig. 5

```{r}

## select data for Fig. 5
Fig_5_data <- analysis_subset %>% dplyr::filter(MASC == "Gray")

## create Fig. 5
Fig_5 <- umbrella_fun(
  scale_min = 1, scale_max = 7, 
  CM = Fig_5_data$C_M, TM = Fig_5_data$T_M, ## means  
  C_SD = Fig_5_data$C_SD, T_SD = Fig_5_data$T_SD, ## standard deviations 
  C_N = Fig_5_data$C_N, T_N = Fig_5_data$T_N) ## N 

## save Fig. 5
ggsave(file = "Output_Graphics/Fig_5.png", 
       Fig_5, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_5

```

## 

## Table 1

```{r}

## select relevant data 
Table_1_data <- MA_results$Gray

## craete data table 
Table_1 <- tibble::tibble(
  "Effect Site" = c("MD", "SMD"), 
      "mean" = c(Table_1_data$MD$b, 
                 Table_1_data$SMD$b), 
      "tau" = c(sqrt(Table_1_data$MD$tau2), 
                sqrt(Table_1_data$SMD$tau2)), 
      "CV" = c(sqrt(Table_1_data$MD$tau2)/Table_1_data$MD$b, 
               sqrt(Table_1_data$SMD$tau2)/Table_1_data$SMD$b), 
      "H2" = c(Table_1_data$MD$H2, 
                 Table_1_data$SMD$H2), 
      "I2" = c(Table_1_data$MD$I2, 
                 Table_1_data$SMD$I2), 
  "QEp < 0.05" = ifelse(test = c(Table_1_data$MD$QEp, Table_1_data$SMD$QEp) < 0.05, yes = "yes", no = "no")
      )

## round numeric variables 
Table_1[,2:5] <- round(Table_1[,2:5], digits = 3)
Table_1[,6] <- round(Table_1[,6], digits = 1)

Table_1

## export table as csv
readr::write_csv(Table_1, file = "Output_Tables/table_1.csv")

## export table as .docx
officer::read_docx() %>%
  flextable::body_add_flextable(value = flextable::flextable(data = Table_1)) %>%
  print(target = "Output_Tables/table_1.docx")

## keep the environment tidy 
rm(Table_1_data)

```

## Fig. 6

```{r}

## select data for Fig. 6
Fig_6_data <- analysis_subset %>% dplyr::filter(MASC == "Oppenheimer_Meyvis")

## create Fig. 6
Fig_6 <- umbrella_fun(
  scale_min = 1, scale_max = 9, 
  CM = Fig_6_data$C_M, TM = Fig_6_data$T_M, ## means  
  C_SD = Fig_6_data$C_SD, T_SD = Fig_6_data$T_SD, ## standard deviations 
  C_N = Fig_6_data$C_N, T_N = Fig_6_data$T_N) ## N 

## save Fig. 6
ggsave(file = "Output_Graphics/Fig_6.png", 
       Fig_6, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_6

```

## Correlation 

```{r}

## calculate correlation between MD and pooled SD 
round(cor(Fig_6_data$MD, Fig_6_data$pooled_SD), digits = 2)

```

## 

## Table 2

```{r}

## select relevant data 
Table_2_data <- MA_results$Gray

## craete data table 
Table_2 <- tibble::tibble(
  "Effect Site" = c("MD", "SMD"), 
  "mean" = c(Table_2_data$MD$b, 
             Table_2_data$SMD$b), 
  "tau" = c(sqrt(Table_2_data$MD$tau2), 
            sqrt(Table_2_data$SMD$tau2)), 
  "CV" = c(sqrt(Table_2_data$MD$tau2)/Table_2_data$MD$b, 
           sqrt(Table_2_data$SMD$tau2)/Table_2_data$SMD$b), 
  "H2" = c(Table_2_data$MD$H2, 
           Table_2_data$SMD$H2), 
  "I2" = c(Table_2_data$MD$I2, 
           Table_2_data$SMD$I2), 
  "QEp < 0.05" = ifelse(test = c(Table_2_data$MD$QEp, Table_2_data$SMD$QEp) < 0.05, yes = "yes", no = "no")
)

## round numeric variables 
Table_2[,2:5] <- round(Table_2[,2:5], digits = 3)
Table_2[,6] <- round(Table_2[,6], digits = 1)

Table_2

## export table as csv
readr::write_csv(Table_2, file = "Output_Tables/table_2.csv")

## export table as .docx
officer::read_docx() %>%
  flextable::body_add_flextable(value = flextable::flextable(data = Table_2)) %>%
  print(target = "Output_Tables/table_2.docx")

## keep the environment tidy 
rm(Table_2_data)

```

## Fig. 7

```{r}

## select data for Fig. 7
Fig_7_data <- analysis_subset %>% dplyr::filter(MASC == "Knobe")

## create Fig. 7
Fig_7 <- umbrella_fun(
  scale_min = 1, scale_max = 7, 
  CM = Fig_7_data$C_M, TM = Fig_7_data$T_M, ## means  
  C_SD = Fig_7_data$C_SD, T_SD = Fig_7_data$T_SD, ## standard deviations 
  C_N = Fig_7_data$C_N, T_N = Fig_7_data$T_N) ## N 

## save Fig. 7
ggsave(file = "Output_Graphics/Fig_7.png", 
       Fig_7, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_7

```

## 

## Correlation 

```{r}

## calculate correlation between MD and pooled SD 
round(cor(Fig_7_data$MD, Fig_7_data$pooled_SD), digits = 2)

```

## Table 3

```{r}

## select relevant data 
Table_3_data <- MA_results$Gray

## craete data table 
Table_3 <- tibble::tibble(
  "Effect Site" = c("MD", "SMD"), 
  "mean" = c(Table_3_data$MD$b, 
             Table_3_data$SMD$b), 
  "tau" = c(sqrt(Table_3_data$MD$tau2), 
            sqrt(Table_3_data$SMD$tau2)), 
  "CV" = c(sqrt(Table_3_data$MD$tau2)/Table_3_data$MD$b, 
           sqrt(Table_3_data$SMD$tau2)/Table_3_data$SMD$b), 
  "H2" = c(Table_3_data$MD$H2, 
           Table_3_data$SMD$H2), 
  "I2" = c(Table_3_data$MD$I2, 
           Table_3_data$SMD$I2), 
  "QEp < 0.05" = ifelse(test = c(Table_3_data$MD$QEp, Table_3_data$SMD$QEp) < 0.05, yes = "yes", no = "no")
)

## round numeric variables 
Table_3[,2:5] <- round(Table_3[,2:5], digits = 3)
Table_3[,6] <- round(Table_3[,6], digits = 1)

Table_3

## export table as csv
readr::write_csv(Table_3, file = "Output_Tables/table_3.csv")

## export table as .docx
officer::read_docx() %>%
  flextable::body_add_flextable(value = flextable::flextable(data = Table_3)) %>%
  print(target = "Output_Tables/table_3.docx")

## keep the environment tidy 
rm(Table_3_data)

```

## Fig. 8

```{r}

## create Fig. 8
Fig_8 <- ggplot() + 
  geom_point(aes(x = MD, 
                 y = pooled_SD, 
                 size = C_N + T_N), 
             data = Fig_7_data) + 
  xlab(label = "mean difference") + 
  ylab(label = "pooled standard deviation") +
  theme_minimal() + 
  theme(legend.position = "none")

## save Fig. 8
ggsave(file = "Output_Graphics/Fig_8.png", 
       Fig_8, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_8

```
